import { TransformObjectId } from '@automagical/persistence';
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Expose } from 'class-transformer';
import {
  IsDateString,
  IsNumber,
  IsOptional,
  IsString,
  ValidateNested,
} from 'class-validator';
import { Document } from 'mongoose';

import { LightingCacheDTO } from '../dto';

export class RoomEntitySaveStateDTO {
  public entity_id: string;
  public extra?: LightingCacheDTO | Record<string, unknown>;
  public state: string;
}
export type BASIC_STATE = { state: string };

@Schema({
  collection: `save_state`,
  timestamps: {
    createdAt: 'created',
    updatedAt: 'updated',
  },
})
export class SaveStateDTO<T extends unknown = unknown> {
  /**
   * Autogenerated string
   */
  @IsOptional()
  @IsString()
  @TransformObjectId()
  public _id?: string;

  /**
   * Autogenerated creation date
   */
  @IsOptional()
  @IsDateString()
  @Prop({
    index: true,
  })
  public created?: Date;

  @IsNumber()
  @IsOptional()
  @Prop({ default: null, type: 'number' })
  public deleted?: number;

  @ValidateNested()
  @IsOptional()
  @Prop()
  /**
   * Describe the state of every active entity
   */
  public entities?: RoomEntitySaveStateDTO[];

  @IsString()
  @Prop({ required: true, type: 'string' })
  @Expose()
  public friendlyName: string;

  /**
   * How the groups should react.
   * Must be a valid action for the group, or a valid state id for the group
   */
  public groups?: Record<string, 'turnOn' | 'turnOff' | string>;

  /**
   * Autogenerated last modified date
   */
  @IsOptional()
  @IsDateString()
  @Prop({
    index: true,
  })
  public modified?: Date;
}

export type SaveStateDocument = SaveStateDTO & Document;
export const SaveStateSchema = SchemaFactory.createForClass(SaveStateDTO);
