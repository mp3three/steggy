import {
  IsDateString,
  IsEnum,
  IsOptional,
  IsString,
} from '@automagical/validation';
import { Prop, Schema } from '@nestjs/mongoose';
import { Schema as MongooseSchema } from 'mongoose';

import { OPERATORS, VALUE_TYPES } from './constants';

@Schema({
  minimize: true,
  timestamps: {
    updatedAt: 'modified',
  },
})
export class FieldMatchAccessPermissionDTO {
  // #region Object Properties

  @IsEnum(OPERATORS)
  @Prop({
    default: OPERATORS.eq,
    enum: OPERATORS,
    type: 'enum',
  })
  public operator?: OPERATORS;
  @IsEnum(VALUE_TYPES)
  @Prop({
    default: VALUE_TYPES.string,
    enum: VALUE_TYPES,
    required: true,
    type: 'enum',
  })
  public valueType?: VALUE_TYPES;
  /**
   * Autogenerated creation date
   */
  @IsOptional()
  @IsDateString()
  @Prop({
    index: true,
    type: Date,
  })
  public created?: string;
  /**
   * Autogenerated last modified date
   */
  @IsOptional()
  @IsDateString()
  @Prop({
    index: true,
    type: Date,
  })
  public modified?: string;
  /**
   * Autogenerated string
   */
  @IsOptional()
  @IsString()
  public _id?: string;
  @IsString()
  @Prop({ required: true })
  public formFieldPath: string;
  @IsString()
  @Prop({ required: true })
  public value: string;
  @IsString({ each: true })
  @Prop({
    ref: 'role',
    type: MongooseSchema.Types.ObjectId,
  })
  public roles: string;

  // #endregion Object Properties
}
