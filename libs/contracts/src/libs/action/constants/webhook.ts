import { SubmissionActionInfoDTO } from '@automagical/contracts/action';
import {
  BaseComponentDTO,
  BaseLayoutComponentDTO,
  ButtonComponentDTO,
  CheckboxComponentDTO,
  ColumnsComponentDTO,
  ContainerComponentDTO,
  ContentComponentDTO,
  DataGridComponentDTO,
  FieldSetComponentDTO,
  HiddenComponentDTO,
  HtmlElementComponentDTO,
  PanelComponentDTO,
  SelectComponentDTO,
  TextAreaComponentDTO,
  TextFieldComponentDTO,
  WellComponentDTO,
} from '@automagical/contracts/components';
import {
  ACTION_NAMES,
  FormDTO,
  HANDLERS,
  ProjectDTO,
} from '@automagical/contracts/formio-sdk';
import { ACTION_METHOD } from '@automagical/contracts/server';
/* eslint-disable radar/no-duplicate-string */
export const WEBHOOK_USER_AGENT = 'Form.io Webhook Action';
export const WEBHOOK_INFO: SubmissionActionInfoDTO = {
  defaults: {
    handler: [HANDLERS.after],
    method: [ACTION_METHOD.create, ACTION_METHOD.update, ACTION_METHOD.delete],
    name: ACTION_NAMES.webhook,
    priority: 0,
    title: 'Webhook (Premium)',
  },
  description: 'Allows you to trigger an external interface.',
  group: 'default',
  name: ACTION_NAMES.webhook,
  priority: 0,
  title: 'Webhook (Premium)',
};

export const WEBHOOK_SETTINGS_FORM = (
  project: ProjectDTO,
  form: FormDTO,
): { action: string; components: BaseComponentDTO[] } => {
  return {
    action: `/project/${project._id}/form/${form._id}/action`,
    components: [
      { input: true, key: 'priority', type: 'hidden' } as HiddenComponentDTO,
      { input: true, key: 'name', type: 'hidden' } as HiddenComponentDTO,
      {
        input: true,
        key: 'title',
        label: 'Title',
        type: 'textfield',
      } as TextFieldComponentDTO,
      {
        components: [
          {
            components: [
              {
                clearOnHide: false,
                columns: [
                  {
                    components: [
                      {
                        data: {
                          values: [
                            { label: 'Match', value: '' },
                            { label: 'GET', value: 'get' },
                            { label: 'POST', value: 'post' },
                            { label: 'PUT', value: 'put' },
                            { label: 'DELETE', value: 'delete' },
                            { label: 'PATCH', value: 'patch' },
                          ],
                        },
                        dataSrc: 'values',
                        description:
                          'If set to Match it will use the same Request Type as sent to the Form.io server.',
                        input: true,
                        key: 'method',
                        label: 'Request Method',
                        persistent: true,
                        placeholder: 'Match',
                        template: '<span>{{ item.label }}</span>',
                        type: 'select',
                        valueProperty: 'value',
                      } as SelectComponentDTO,
                    ],
                    offset: 0,
                    pull: 0,
                    push: 0,
                    width: 2,
                  },
                  {
                    components: [
                      {
                        defaultValue: '',
                        description:
                          'The URL the request will be made to. You can interpolate the URL with <b>data.myfield</b> or <b>externalId</b> variables.',
                        input: true,
                        inputType: 'text',
                        key: 'url',
                        label: 'Request URL',
                        multiple: false,
                        placeholder: 'http://myreceiver.com/something.php',
                        prefix: '',
                        suffix: '',
                        type: 'textfield',
                        validate: { required: true },
                      } as TextFieldComponentDTO,
                    ],
                    offset: 0,
                    pull: 0,
                    push: 0,
                    width: 10,
                  },
                ] as BaseLayoutComponentDTO[],
                input: false,
                key: 'columns',
                label: 'Columns',
                type: 'columns',
              } as ColumnsComponentDTO,
              {
                components: [
                  {
                    defaultValue: false,
                    hideLabel: false,
                    input: true,
                    inputType: 'checkbox',
                    key: 'forwardHeaders',
                    label: 'Forward headers',
                    persistent: true,
                    protected: false,
                    tooltip:
                      'Pass on any headers received by the form.io server.',
                    type: 'checkbox',
                  } as CheckboxComponentDTO,
                  {
                    components: [
                      {
                        autocomplete: 'off',
                        defaultValue: '',
                        input: true,
                        inputType: 'text',
                        key: 'username',
                        label: 'Authorize User',
                        multiple: false,
                        placeholder: 'User for Basic Authentication',
                        type: 'textfield',
                      } as TextFieldComponentDTO,
                      {
                        autocomplete: 'off',
                        defaultValue: '',
                        input: true,
                        inputType: 'password',
                        key: 'password',
                        label: 'Authorize Password',
                        multiple: false,
                        placeholder: 'Password for Basic Authentication',
                        type: 'textfield',
                      } as TextFieldComponentDTO,
                    ],
                    input: false,
                    key: 'fieldset',
                    label: 'fieldset',
                    legend: 'HTTP Basic Authentication (optional)',
                    tableView: false,
                    type: 'fieldset',
                  } as FieldSetComponentDTO,
                  {
                    addAnother: 'Add Header',
                    components: [
                      {
                        clearOnHide: true,
                        inDataGrid: true,
                        input: true,
                        inputType: 'text',
                        key: 'header',
                        label: 'Header',
                        persistent: true,
                        protected: false,
                        tableView: true,
                        type: 'textfield',
                      } as TextFieldComponentDTO,
                      {
                        clearOnHide: true,
                        inDataGrid: true,
                        input: true,
                        inputType: 'text',
                        key: 'value',
                        label: 'Value',
                        persistent: true,
                        protected: false,
                        tableView: true,
                        type: 'textfield',
                      } as TextFieldComponentDTO,
                    ],
                    input: true,
                    key: 'headers',
                    label: 'Additional Headers',
                    persistent: true,
                    tree: true,
                    type: 'datagrid',
                  } as DataGridComponentDTO,
                ],
                input: false,
                key: 'panel1',
                label: 'Panel',
                tableView: false,
                title: 'HTTP Headers',
                type: 'panel',
              },
              {
                components: [
                  {
                    html: '<p>By default the request payload will contain an object with the following information:</p> <div style="background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;">{<br /> &nbsp;&nbsp;request: request, // an object containing request body to the form.io server.<br /> &nbsp;&nbsp;response: response, // an object containing the server response from the form.io server.<br /> &nbsp;&nbsp;submission: submission, // an object containing the submission object from the request.<br /> &nbsp;&nbsp;params: params, // an object containing the params for the request such as query parameters or url parameters.<br /> }</div> <p>You can use the transform payload javascript to modify the contents of the payload that will be send in this webhook. The following variables are also available: headers</p>',
                    input: false,
                    key: 'content',
                    label: 'content',
                    type: 'content',
                  } as ContentComponentDTO,
                  {
                    autofocus: false,
                    defaultValue: '',
                    description:
                      'Available variables are payload, externalId, and headers.',
                    hidden: false,
                    input: true,
                    key: 'transform',
                    label: 'Transform Payload',
                    multiple: false,
                    persistent: true,
                    placeholder:
                      '/** Example Code **/\npayload = payload.submission.data;',
                    protected: false,
                    rows: 8,
                    spellcheck: true,
                    tableView: true,
                    type: 'textarea',
                    wysiwyg: false,
                  } as TextAreaComponentDTO,
                ],
                input: false,
                key: 'panel2',
                label: 'Panel',
                tableView: false,
                title: 'Request Payload',
                type: 'panel',
              } as PanelComponentDTO,
              {
                components: [
                  {
                    defaultValue: false,
                    hideLabel: false,
                    input: true,
                    inputType: 'checkbox',
                    key: 'block',
                    label:
                      'Wait for webhook response before continuing actions',
                    persistent: true,
                    protected: false,
                    type: 'checkbox',
                  } as CheckboxComponentDTO,
                  {
                    html: '<p>When making a request to an external service, you may want to save an external Id in association with this submission so you can refer to the same external resource later. To do that, enter an external ID reference name and the path to the id in the response data object. This value will then be available as <b>externalId</b> in the Request URL and Transform Payload fields.</p>',
                    input: false,
                    key: 'content',
                    label: 'content',
                    type: 'content',
                  } as ContentComponentDTO,
                  {
                    description:
                      'The name to store and reference the external Id for this request',
                    input: true,
                    inputType: 'text',
                    key: 'externalIdType',
                    label: 'External Id Type',
                    multiple: false,
                    persistent: true,
                    protected: false,
                    type: 'textfield',
                    unique: false,
                  } as TextFieldComponentDTO,
                  {
                    clearOnHide: true,
                    description:
                      'The path to the data in the webhook response object',
                    input: true,
                    inputType: 'text',
                    key: 'externalIdPath',
                    label: 'External Id Path',
                    multiple: false,
                    protected: false,
                    type: 'textfield',
                  } as TextFieldComponentDTO,
                ],
                input: false,
                key: 'panel3',
                title: 'Response Payload',
                type: 'panel',
              } as PanelComponentDTO,
            ],
            input: false,
            key: 'settings',
            type: 'container',
          } as ContainerComponentDTO,
        ],
        input: false,
        legend: 'Action Settings',
        tree: true,
        type: 'fieldset',
      } as FieldSetComponentDTO,
      {
        components: [
          {
            data: {
              json: '[{"name":"before","title":"Before"},{"name":"after","title":"After"}]',
            },
            dataSrc: 'json',
            input: true,
            key: 'handler',
            label: 'Handler',
            multiple: true,
            placeholder: 'Select which handler(s) you would like to trigger',
            template: '<span>{{ item.title }}</span>',
            type: 'select',
            valueProperty: 'name',
          } as SelectComponentDTO,
          {
            data: {
              json: '[{"name":"create","title":"Create"},{"name":"update","title":"Update"},{"name":"read","title":"Read"},{"name":"delete","title":"Delete"},{"name":"index","title":"Index"}]',
            },
            dataSrc: 'json',
            input: true,
            key: 'method',
            label: 'Methods',
            multiple: true,
            placeholder: 'Trigger action on method(s)',
            template: '<span>{{ item.title }}</span>',
            type: 'select',
            valueProperty: 'name',
          } as SelectComponentDTO,
        ],
        input: false,
        key: 'conditions',
        legend: 'Action Execution',
        tree: false,
        type: 'fieldset',
      } as FieldSetComponentDTO,
      {
        components: [
          {
            components: [
              {
                columns: [
                  {
                    components: [
                      {
                        data: {
                          json: JSON.stringify([
                            { key: '' },
                            ...form.components,
                          ]),
                        },
                        dataSrc: 'json',
                        input: true,
                        key: 'field',
                        label: 'Trigger this action only if field',
                        multiple: false,
                        placeholder: 'Select the conditional field',
                        template: '<span>{{ item.label || item.key }}</span>',
                        type: 'select',
                        valueProperty: 'key',
                      } as SelectComponentDTO,
                      {
                        data: {
                          json: '',
                          resource: '',
                          url: '',
                          values: [
                            { label: '', value: '' },
                            { label: 'Equals', value: 'equals' },
                            { label: 'Does Not Equal', value: 'notEqual' },
                          ],
                        },
                        dataSrc: 'values',
                        input: true,
                        key: 'eq',
                        label: '',
                        multiple: false,
                        placeholder: 'Select comparison',
                        template: '<span>{{ item.label }}</span>',
                        type: 'select',
                        valueProperty: 'value',
                      } as SelectComponentDTO,
                      {
                        input: true,
                        inputType: 'text',
                        key: 'value',
                        label: '',
                        multiple: false,
                        placeholder: 'Enter value',
                        type: 'textfield',
                      } as TextFieldComponentDTO,
                    ],
                  },
                  {
                    components: [
                      {
                        components: [
                          {
                            className: '',
                            content:
                              'Or you can provide your own custom JavaScript or <a href="http://jsonlogic.com" target="_blank">JSON</a> condition logic here',
                            input: false,
                            key: 'html',
                            tag: 'h4',
                            type: 'htmlelement',
                          } as HtmlElementComponentDTO,
                          {
                            editorComponents: [
                              {
                                input: true,
                                key: 'textField',
                                label: 'Text Field',
                                tableView: true,
                                type: 'textfield',
                              } as TextFieldComponentDTO,
                              {
                                disableOnInvalid: true,
                                input: true,
                                key: 'submit',
                                label: 'Submit',
                                tableView: false,
                                type: 'button',
                              } as ButtonComponentDTO,
                            ],
                            input: true,
                            key: 'custom',
                            label: '',
                            placeholder:
                              '// Example: Only execute if submitted roles has \'authenticated\'.\nJavaScript: execute = (data.roles.indexOf(\'authenticated\') !== -1);\nJSON: { "in": [ "authenticated", { "var": "data.roles" } ] }',
                            type: 'textarea',
                          } as TextAreaComponentDTO,
                        ],
                        input: false,
                        key: 'well2',
                        type: 'well',
                      } as WellComponentDTO,
                    ],
                  } as BaseLayoutComponentDTO,
                ],
                input: false,
                key: 'columns',
                type: 'columns',
              } as ColumnsComponentDTO,
            ],
            input: false,
            key: 'condition',
            tree: true,
            type: 'container',
          } as ContainerComponentDTO,
        ],
        input: false,
        key: 'fieldset',
        legend: 'Action Conditions (optional)',
        tree: false,
        type: 'fieldset',
      } as FieldSetComponentDTO,
      {
        className: '',
        content: '',
        input: false,
        key: 'html2',
        tag: 'hr',
        type: 'htmlelement',
      } as HtmlElementComponentDTO,
      {
        action: 'submit',
        block: false,
        disableOnInvalid: true,
        input: true,
        key: 'submit',
        label: 'Save Action',
        leftIcon: '',
        rightIcon: '',
        size: 'md',
        theme: 'primary',
        type: 'button',
      } as ButtonComponentDTO,
    ],
  };
};
