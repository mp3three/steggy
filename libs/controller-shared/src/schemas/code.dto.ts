import { Prop, Schema } from '@nestjs/mongoose';
import { ApiProperty } from '@nestjs/swagger';
import { TransformObjectId } from '@steggy/utilities';
import {
  IsDateString,
  IsEnum,
  IsNumber,
  IsOptional,
  IsString,
  MinLength,
  ValidateNested,
} from 'class-validator';

import { MINIMUM_NAME_SIZE } from '../constants';

const DEFAULT_CODE_PRIORITY = 1000;

export class CodeEnableDTO {
  public type?: 'enable' | 'disable';
}

export enum CodeType {
  request = 'request',
  execute = 'execute',
}

@Schema({
  collection: 'code',
  timestamps: {
    createdAt: 'created',
    updatedAt: 'modified',
  },
})
export class CodeDTO {
  /**
   * Autogenerated string
   */
  @IsOptional()
  @IsString()
  @ApiProperty({ required: false })
  @TransformObjectId()
  public _id?: string;

  @IsString()
  @Prop({ default: '' })
  @ApiProperty()
  public code: string;

  /**
   * Autogenerated creation date
   */
  @IsOptional()
  @ApiProperty({ required: false })
  @IsDateString()
  @Prop({ index: true })
  public created?: Date;

  @IsNumber()
  @ApiProperty({ required: false })
  @IsOptional()
  @Prop({ default: null, index: true, type: 'number' })
  public deleted?: number;

  @ValidateNested()
  @IsOptional()
  @ApiProperty({ required: false, type: [CodeEnableDTO] })
  @Prop({ default: { type: 'enable' }, index: true })
  public enable?: CodeEnableDTO;

  @IsString()
  @Prop({ required: true, type: 'string' })
  @ApiProperty()
  @MinLength(MINIMUM_NAME_SIZE)
  public friendlyName: string;

  /**
   * Autogenerated last modified date
   */
  @IsOptional()
  @ApiProperty({ required: false })
  @IsDateString()
  @Prop({ index: true })
  public modified?: Date;

  /**
   * Loading order for VM
   */
  @Prop({ default: DEFAULT_CODE_PRIORITY })
  @ApiProperty({ required: false })
  @IsOptional()
  @IsNumber()
  public priority?: number;

  @Prop({ default: [] })
  @IsOptional()
  @ApiProperty({ type: [String] })
  @IsString({ each: true })
  public tags?: string[];

  @IsEnum(CodeType)
  @Prop({ default: CodeType.request })
  @ApiProperty()
  @IsOptional()
  public type?: `${CodeType}` = CodeType.request;
}
