{
  "changes": [
    {
      "from": "0.0.10",
      "message": {
        "text": "## Devtools\n\n### Config Builder\n\nConfig builder builds off of the standardized bootstrapping logic.\nIt will first request a build > config scan of a requested application, in order to retrieve it's configuration metadata.\nUsing that metadata, it guides the user through building a compatible config file, and saving the file in the correct format / location.\n\n### Album Download\n\n> Side project / additional use case used to fix some code\n\nDownload an imgur album to a folder, and correct the filenames so the prefixed numbers are a standard string side (because some downstream sorting is badly implemented)\n\n### Changelog\n\n> Used to generate this!\n\n- Bump version numbers in affected applications\n- Provide changelogs more relevant to a single project\n- Save changelog\n- Bump root version / provide overall changelog message (this)\n"
      },
      "project": "devtools",
      "to": "0.1.0"
    },
    {
      "from": "0.0.3",
      "message": {
        "text": "## Existing code\n\nFor the most part, the home controller was unaffected by the changes. \nEffort was taken to provide as much separatation as possible with nest modules so that unneccessary code does not get included in build output.\n\n"
      },
      "project": "home-controller",
      "to": "0.1.0"
    },
    {
      "from": "0.0.1",
      "message": {},
      "project": "tty",
      "to": "0.1.0"
    },
    {
      "from": "0.0.10",
      "message": {},
      "project": "utilities",
      "to": "0.1.0"
    },
    {
      "from": "0.0.1",
      "message": {},
      "project": "controller-logic",
      "to": "0.1.0"
    },
    {
      "from": "0.0.1",
      "message": {},
      "project": "home-assistant",
      "to": "0.1.0"
    }
  ],
  "date": "2021-09-18T01:35:14.794Z",
  "root": {
    "message": {
      "text": "# Patch 0.1.0\n\nMajor improvements to devtools and repository structure overall.\nMajor theme was better utilization of metadata already in the repo, logging, as well as configuration management\n\n## Metadata\n\nProject metadata is now stored in an `automagical.json` file that is stored alongside `project.json` in the project root.\nThe metadata includes a description of all configuration items that project can attempt to request.\nThese metadata files are included with the built output, and can be used to provide runtime defaults for injected configuration properties.\n\n### Injected configurations\n\nThe `@InjectConfig` annotation can be used to provde a value to a service.\nIt pulls the property from the loaded application configuration, and injects it as a property into a service.\n\nBest practice in this repo is to match all the properties with constants in a `config.ts` file in src root.\n\n```typescript\nexport const CONFIG_ITEM = 'CONFIG_ITEM';\n\n@InjectConfig(CONFIG_ITEM) private readonly configItem: number\n```\n\n### Standardized nodejs bootstrapping\n\nIn order to facilite a standard feature set across all nest application, a standardized bootstrap function was created.\nIt is best to keep the main entrypoint file as empty of code as possible, utilizing environment files to do most of the configuration.\n\nAny application that utilizes the standard boostrap has access to the config scanner environment / build configuration.\nThe config scanner can be used to get a picture of which properties whould actually be included in environment files based on the code being loaded.\nWhen combined with the metadata defined in `automagical.json`, it provides all the information needed for devtools to manage user configs.\n\n## Looking forward\n\n### High level 0.2.0 goals\n\n- secrets management\n- deployments\n- living docs\n\n"
    },
    "version": "0.1.0"
  },
  "version": 1
}
